name: Send Files to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  send_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensure we have enough history for diff

      - name: Get changed files
        id: files
        run: |
          echo "=== Getting changed files ==="
          
          # Try multiple methods to get changed files
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ] || [ -z "${{ github.event.before }}" ]; then
            echo "First push or no previous commit - getting all files"
            CHANGED_FILES=$(find . -type f \( -name "*.js" -o -name "*.json" -o -name "*.py" -o -name "*.txt" -o -name "*.md" \) -not -path './.git/*' | head -10 | tr '\n' ' ')
          else
            echo "Regular push - getting changed files"
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')
            
            # Fallback if git diff returns nothing
            if [ -z "$CHANGED_FILES" ]; then
              echo "Git diff returned nothing, trying alternative method"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
            fi
            
            # Still nothing? Try showing files from last commit
            if [ -z "$CHANGED_FILES" ]; then
              echo "Still nothing, getting files from last commit"
              CHANGED_FILES=$(git show --pretty="" --name-only HEAD | tr '\n' ' ')
            fi
          fi
          
          # Remove leading/trailing whitespace
          CHANGED_FILES=$(echo $CHANGED_FILES | xargs)
          
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "Detected files: '$CHANGED_FILES'"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "HAS_FILES=false" >> $GITHUB_ENV
            echo "❌ No files detected!"
          else
            echo "HAS_FILES=true" >> $GITHUB_ENV
            echo "✅ Found files to send"
          fi

      - name: Send changed files to server
        if: env.HAS_FILES == 'true'
        run: |
          echo "=== Sending files to server ==="
          echo "Files to process: '$CHANGED_FILES'"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "❌ No files to send!"
            exit 0
          fi
          
          for file in $CHANGED_FILES; do
            echo ""
            echo "---- Processing: $file ----"
            
            # Skip if file doesn't exist (could be deleted)
            if [ ! -f "$file" ]; then
              echo "⚠️  File $file doesn't exist (might be deleted), skipping"
              continue
            fi
            
            echo "Reading file content..."
            # Safely escape content for JSON using jq
            CONTENT=$(cat "$file" | jq -Rs .) || {
              echo "❌ Failed to read/escape content for $file"
              continue
            }
            
            # Create proper JSON payload using jq
            JSON_PAYLOAD=$(jq -n \
              --arg file_path "$file" \
              --argjson content "$CONTENT" \
              '{file_path: $file_path, content: $content}') || {
              echo "❌ Failed to create JSON payload for $file"
              continue
            }
            
            echo "Sending to server (payload size: $(echo "$JSON_PAYLOAD" | wc -c) bytes)..."
            
            # Send with proper error handling
            HTTP_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
              https://2ff305ee6998.ngrok-free.app/inputCode \
              -H "Content-Type: application/json" \
              -H "ngrok-skip-browser-warning: true" \
              -d "$JSON_PAYLOAD")
            
            # Extract HTTP status and response body
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1 | cut -d: -f2)
            RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            echo "HTTP Status: $HTTP_STATUS"
            echo "Server response:"
            echo "$RESPONSE_BODY"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Successfully sent $file"
            else
              echo "❌ Failed to send $file (HTTP $HTTP_STATUS)"
            fi
            
            echo "------------------------"
          done
          
          echo "=== Finished sending files ==="

      - name: No files to send
        if: env.HAS_FILES == 'false'
        run: |
          echo "ℹ️  No files detected to send to server"
          echo "This could mean:"
          echo "  - No files were changed in this commit"
          echo "  - Only non-tracked file types were changed"
          echo "  - Git diff command failed"