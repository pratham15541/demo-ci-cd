name: Send Files to Server and Create Tests

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  send_files_and_create_tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Get changed JS/TS files
        id: files
        run: |
          ALL_FILES=$(git show --pretty="" --name-only HEAD)
          CHANGED_FILES=""
          for file in $ALL_FILES; do
            case "$file" in
              *.js|*.jsx|*.ts|*.tsx)
                if [ -f "$file" ]; then
                  CHANGED_FILES="$CHANGED_FILES $file"
                fi
                ;;
            esac
          done
          
          CHANGED_FILES=$(echo $CHANGED_FILES | xargs)
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "HAS_FILES=false" >> $GITHUB_ENV
          else
            echo "HAS_FILES=true" >> $GITHUB_ENV
          fi

      - name: Process files and create tests
        if: env.HAS_FILES == 'true'
        run: |
          # Create JSON decoder
          cat > jsonDecoder.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const https = require('https');
          const http = require('http');
          const url = require('url');

          async function processFiles() {
            const changedFiles = process.env.CHANGED_FILES.split(' ').filter(f => f.trim());
            let totalTestsCreated = 0;

            for (const file of changedFiles) {
              if (!fs.existsSync(file)) continue;

              try {
                const content = fs.readFileSync(file, 'utf8');
                const jsonPayload = JSON.stringify({
                  file_path: file,
                  content: content
                });

                const serverUrl = ' https://c2e16ccb313b.ngrok-free.app/inputCode';
                const parsedUrl = url.parse(serverUrl);

                const options = {
                  hostname: parsedUrl.hostname,
                  port: parsedUrl.port || (parsedUrl.protocol === 'https:' ? 443 : 80),
                  path: parsedUrl.path,
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(jsonPayload),
                    'ngrok-skip-browser-warning': 'true'
                  }
                };

                const response = await new Promise((resolve) => {
                  const client = parsedUrl.protocol === 'https:' ? https : http;
                  const req = client.request(options, (res) => {
                    let responseBody = '';
                    res.on('data', (chunk) => { responseBody += chunk; });
                    res.on('end', () => resolve({ status: res.statusCode, body: responseBody }));
                  });
                  req.on('error', () => resolve({ status: 500, body: '' }));
                  req.write(jsonPayload);
                  req.end();
                });

                if (response.status === 200) {
                  const testFiles = parseResponse(response.body);
                  if (testFiles) {
                    const created = createTestFiles(testFiles, file);
                    totalTestsCreated += created;
                  }
                }
              } catch (err) {
                // Skip failed files
              }
            }

            return totalTestsCreated;
          }

          function parseResponse(responseBody) {
            try {
              let data = JSON.parse(responseBody);
              return data.files || data.test_files || data.data || data;
            } catch (err) {
              // Try extracting from code blocks
              const match = responseBody.match(/```(?:json)?\s*([\s\S]*?)\s*```/i);
              if (match) {
                try {
                  let data = JSON.parse(match[1].trim());
                  return data.files || data.test_files || data.data || data;
                } catch (e) {}
              }
              return null;
            }
          }

          function createTestFiles(testFiles, originalFile) {
            if (!fs.existsSync('tests')) {
              fs.mkdirSync('tests', { recursive: true });
            }

            let created = 0;
            for (const [filename, content] of Object.entries(testFiles)) {
              if (typeof content === 'string') {
                try {
                  let safeFilename = path.basename(filename);
                  if (!safeFilename.includes('test')) {
                    const originalName = path.basename(originalFile, path.extname(originalFile));
                    const ext = path.extname(safeFilename) || '.test.js';
                    safeFilename = `${originalName}.test${ext}`;
                  }
                  
                  const filePath = path.join('tests', safeFilename);
                  fs.writeFileSync(filePath, content, 'utf8');
                  created++;
                } catch (err) {
                  // Skip failed files
                }
              }
            }
            return created;
          }

          processFiles().then(count => {
            console.log(`Created ${count} test files`);
            process.exit(0);
          }).catch(() => process.exit(1));
          EOF

          node jsonDecoder.js

      - name: Commit test files
        if: env.HAS_FILES == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -d "tests" ] && [ "$(ls -A tests 2>/dev/null)" ]; then
            git add tests/
            
            if ! git diff --staged --quiet; then
              git commit -m "Auto-generated tests from ${{ github.sha }}"
              git push
            fi
          fi

      - name: No files to process
        if: env.HAS_FILES == 'false'
        run: echo "No JS/TS files found in last commit"