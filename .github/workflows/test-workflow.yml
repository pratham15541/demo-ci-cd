name: Send Files to Server

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  send_files:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        id: files
        run: |
          echo "=== Getting changed files ==="

          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ] || [ -z "${{ github.event.before }}" ]; then
            echo "First push or no previous commit - getting all files"
            CHANGED_FILES=$(find . -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.json" -o -name "*.py" -o -name "*.txt" -o -name "*.md" \) -not -path './.git/*' | tr '\n' ' ')
          else
            echo "Regular push - getting changed files"
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "Git diff returned nothing, trying alternative method"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
            fi
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "Still nothing, getting files from last commit"
              CHANGED_FILES=$(git show --pretty="" --name-only HEAD | tr '\n' ' ')
            fi
          fi

          CHANGED_FILES=$(echo $CHANGED_FILES | xargs)
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "Detected files: '$CHANGED_FILES'"

          if [ -z "$CHANGED_FILES" ]; then
            echo "HAS_FILES=false" >> $GITHUB_ENV
          else
            echo "HAS_FILES=true" >> $GITHUB_ENV
          fi

      - name: Send changed files to server
        id: send_files
        if: env.HAS_FILES == 'true'
        run: |
          echo "=== Sending files to server ==="

          RESPONSE_BODY=""

          for file in $CHANGED_FILES; do
            echo ""
            echo "---- Processing: $file ----"
            
            if [ ! -f "$file" ]; then
              echo "⚠️  File $file doesn't exist, skipping"
              continue
            fi
            
            echo "File info:"
            file "$file" || echo "Cannot determine file type"
            
            echo "Reading and converting file content..."
            
            if command -v iconv >/dev/null 2>&1; then
              CONTENT=$(iconv -f UTF-16 -t UTF-8 "$file" 2>/dev/null | jq -Rs .) || \
              CONTENT=$(iconv -f UTF-16LE -t UTF-8 "$file" 2>/dev/null | jq -Rs .) || \
              CONTENT=$(cat "$file" | jq -Rs .)
            else
              CONTENT=$(cat "$file" | jq -Rs .)
            fi
            
            if [ $? -ne 0 ]; then
              echo "❌ Failed to read content for $file"
              continue
            fi
            
            JSON_PAYLOAD=$(jq -n \
              --arg file_path "$file" \
              --argjson content "$CONTENT" \
              '{file_path: $file_path, content: $content}')
            
            echo "Sending to server..."
            
            HTTP_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
              https://5c6e510e6b7a.ngrok-free.app/inputCode \
              -H "Content-Type: application/json" \
              -H "ngrok-skip-browser-warning: true" \
              -d "$JSON_PAYLOAD")
            
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1 | cut -d: -f2)
            RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            echo "HTTP Status: $HTTP_STATUS"
            echo "Server response: $RESPONSE_BODY"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Successfully sent $file"
              echo "RESPONSE_BODY=$RESPONSE_BODY" >> $GITHUB_ENV
            else
              echo "❌ Failed to send $file (HTTP $HTTP_STATUS)"
            fi
            
            echo "------------------------"
          done

      - name: Decode server response and create files
        if: env.HAS_FILES == 'true'
        id: create_files
        run: |
          echo "=== Decoding server response and creating files ==="
          echo "Response Body: ${{ env.RESPONSE_BODY }}"

          # Write response to temp file
          echo '${{ env.RESPONSE_BODY }}' > response_temp.txt

          # Use your decode.js function with the server response as argument
          node -e "
            const fs = require('fs');
            const { createTestFiles } = require('./decode.js');
            
            // Read the server response from temp file
            const response = fs.readFileSync('response_temp.txt', 'utf8');
            
            console.log('Processing response with decode.js...');
            console.log('Response length:', response.length);
            console.log('Response preview:', response.substring(0, 100) + '...');
            
            // Pass the server response as argument to your decode function
            createTestFiles(response, 'tests');
            console.log('Files created successfully');
          "

          # List created files
          if [ -d 'tests' ]; then
            CREATED_FILES=$(find tests -type f | tr '\n' ' ')
            echo "Created files: $CREATED_FILES"
            echo "created_files=$CREATED_FILES" >> $GITHUB_ENV
          else
            echo "No tests directory found"
            echo "created_files=" >> $GITHUB_ENV
          fi

          # Clean up temp file
          rm -f response_temp.txt

      - name: Configure Git
        if: env.HAS_FILES == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push generated files
        if: env.HAS_FILES == 'true'
        run: |
          echo "=== Committing generated files ==="

          if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            echo "Adding test files to git..."
            git add tests/
            
            # Check if there are changes to commit
            if git diff --cached --quiet; then
              echo "No changes to commit"
            else
              echo "Committing changes..."
              git commit -m "feat: Add test files generated by server response"
              
              echo "Pushing to repository..."
              git push origin main
              echo "✅ Successfully committed and pushed test files"
            fi
          else
            echo "No test files were created to commit"
          fi
