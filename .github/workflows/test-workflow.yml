name: Send Files to Server

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  send_files:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Get changed JS/TS files from last commit
        id: files
        run: |
          echo "=== Getting JS/TS files from last commit ==="

          # Get files from last commit only
          ALL_FILES=$(git show --pretty="" --name-only HEAD)

          # Filter only JS/TS files
          CHANGED_FILES=""
          for file in $ALL_FILES; do
            case "$file" in
              *.js|*.jsx|*.ts|*.tsx)
                if [ -f "$file" ]; then
                  CHANGED_FILES="$CHANGED_FILES $file"
                fi
                ;;
            esac
          done

          CHANGED_FILES=$(echo $CHANGED_FILES | xargs)
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "Detected JS/TS files from last commit: '$CHANGED_FILES'"

          if [ -z "$CHANGED_FILES" ]; then
            echo "HAS_FILES=false" >> $GITHUB_ENV
            echo "No JS/TS files in last commit"
          else
            echo "HAS_FILES=true" >> $GITHUB_ENV
            echo "Found JS/TS files to send"
          fi

      - name: Send JS/TS files to server and process response
        if: env.HAS_FILES == 'true'
        run: |
          echo "=== Sending JS/TS files to server ==="

          # Initialize a flag to track if we got any valid responses
          RECEIVED_VALID_RESPONSE=false

          for file in $CHANGED_FILES; do
            echo ""
            echo "---- Processing: $file ----"
            
            if [ ! -f "$file" ]; then
              echo "File $file doesn't exist, skipping"
              continue
            fi
            
            echo "Reading file content..."
            CONTENT=$(cat "$file" | jq -Rs .) || {
              echo "Failed to read content for $file"
              continue
            }
            
            # Create JSON payload
            JSON_PAYLOAD=$(jq -n \
              --arg file_path "$file" \
              --argjson content "$CONTENT" \
              '{file_path: $file_path, content: $content}')
            
            echo "Sending to server..."
            
            HTTP_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
              https://5c6e510e6b7a.ngrok-free.app/inputCode \
              -H "Content-Type: application/json" \
              -H "ngrok-skip-browser-warning: true" \
              -d "$JSON_PAYLOAD")
            
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1 | cut -d: -f2)
            RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            echo "HTTP Status: $HTTP_STATUS"
            echo "Server response: $RESPONSE_BODY"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Successfully sent $file"
              
              # Save response to file for processing
              echo "$RESPONSE_BODY" > "server_response_${file//\//_}.json"
              RECEIVED_VALID_RESPONSE=true
              echo "Saved response to server_response_${file//\//_}.json"
            else
              echo "Failed to send $file (HTTP $HTTP_STATUS)"
            fi
            
            echo "------------------------"
          done

          echo "RECEIVED_VALID_RESPONSE=$RECEIVED_VALID_RESPONSE" >> $GITHUB_ENV

      - name: Create test files from server response
        if: env.HAS_FILES == 'true' && env.RECEIVED_VALID_RESPONSE == 'true'
        run: |
          echo "=== Creating test files from server responses using decode-output.js ==="

          # Create a simple processor that uses your existing decode-output.js
          cat > process_responses.js << 'EOF'
          const fs = require('fs');
          const { processAndCreateFiles } = require('./decode-output.js');

          // Process all server response files
          const responseFiles = fs.readdirSync('.').filter(file => file.startsWith('server_response_') && file.endsWith('.json'));

          if (responseFiles.length === 0) {
            console.log('No server response files found');
            process.exit(0);
          }

          responseFiles.forEach(responseFile => {
            console.log(`\nProcessing ${responseFile}...`);
            try {
              const responseContent = fs.readFileSync(responseFile, 'utf8');
              console.log(`Response content preview: ${responseContent.substring(0, 150)}...`);
              
              // Use your existing decode-output.js function
              processAndCreateFiles(responseContent, './');
              
              // Clean up the temporary response file
              fs.unlinkSync(responseFile);
              console.log(`Cleaned up ${responseFile}`);
            } catch (err) {
              console.error(`Error processing ${responseFile}:`, err);
            }
          });
          EOF

          # Run the processor using your decode-output.js
          node process_responses.js

          # Clean up the processor script
          rm process_responses.js

      - name: Display created test files
        if: env.HAS_FILES == 'true' && env.RECEIVED_VALID_RESPONSE == 'true'
        run: |
          echo "=== CREATED TEST FILES OUTPUT ==="
          echo ""

          if [ -d "tests" ]; then
            echo "📁 Tests folder structure:"
            find tests -type f | sort
            echo ""
            
            echo "📄 File contents:"
            echo "=================="
            
            for file in $(find tests -type f | sort); do
              echo ""
              echo "🔹 FILE: $file"
              echo "─────────────────────────────────────────────────────────────"
              cat "$file"
              echo ""
              echo "─────────────────────────────────────────────────────────────"
            done
            
            echo ""
            echo "✅ SUMMARY: $(find tests -type f | wc -l) files created in tests/ folder"
          else
            echo "❌ No tests folder found - no files were created"
          fi

      - name: No JS/TS files found
        if: env.HAS_FILES == 'false'
        run: |
          echo "No JavaScript/TypeScript files found in last commit"
          echo "Only .js, .jsx, .ts, .tsx files are processed"
