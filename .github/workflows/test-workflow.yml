name: Auto Generate Tests

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate_and_run_tests:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3️⃣ Get changed JS/TS files
      - name: Detect changed JS/TS files
        id: detect_files
        run: |
          CHANGED=$(git show --pretty="" --name-only HEAD | grep -E '\.(js|jsx|ts|tsx)$' || true)
          echo "CHANGED_FILES=$CHANGED" >> $GITHUB_ENV
          echo "HAS_FILES=$([ -z "$CHANGED" ] && echo false || echo true)" >> $GITHUB_ENV

      # 4️⃣ Create JSON decoder
      - name: Create JSON decoder
        if: env.HAS_FILES == 'true'
        run: |
          cat > jsonDecoder.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          class JsonDecoder {
            constructor() { this.decodedData = null; }
            decode(serverResponse) {
              if (!serverResponse) return { success: false };
              let data = typeof serverResponse === 'object' ? serverResponse : JSON.parse(serverResponse);
              if (data.files) this.decodedData = data.files;
              return { success: true, data: this.decodedData };
            }
            generateTestFiles(folder='tests', originalFile=null) {
              if (!this.decodedData) return { success: false };
              if (!fs.existsSync(folder)) fs.mkdirSync(folder, { recursive: true });
              let count = 0;
              for (const [filename, content] of Object.entries(this.decodedData)) {
                const safeName = originalFile ? path.basename(originalFile, path.extname(originalFile)) + '.test.js' : filename;
                fs.writeFileSync(path.join(folder, safeName), content, 'utf8');
                count++;
              }
              return { success: true, filesCreated: count };
            }
          }
          module.exports = { JsonDecoder };
          EOF

      # 5️⃣ Send files to server and generate tests
      - name: Send files and generate tests
        if: env.HAS_FILES == 'true'
        run: |
          node -e "
          const { JsonDecoder } = require('./jsonDecoder.js');
          const fs = require('fs');
          const https = require('https');
          const http = require('http');
          const url = require('url');

          const files = process.env.CHANGED_FILES.split(' ').filter(f=>f);
          for (const file of files) {
            const content = fs.readFileSync(file, 'utf8');
            const payload = JSON.stringify({ file_path: file, content });

            const serverUrl = ' https://c2e16ccb313b.ngrok-free.app/inputCode';
            const parsed = url.parse(serverUrl);
            const options = { hostname: parsed.hostname, port: parsed.port || (parsed.protocol==='https:'?443:80), path: parsed.path, method:'POST', headers:{'Content-Type':'application/json','Content-Length':Buffer.byteLength(payload)} };
            
            const client = parsed.protocol==='https:' ? https : http;
            const req = client.request(options, res => {
              let body = '';
              res.on('data', chunk => body += chunk);
              res.on('end', () => {
                if (res.statusCode===200) {
                  const decoder = new JsonDecoder();
                  const result = decoder.decode(body);
                  if (result.success) decoder.generateTestFiles('tests', file);
                }
              });
            });
            req.write(payload); req.end();
          }
          "

      # 6️⃣ Run tests
      - name: Run generated tests
        if: env.HAS_FILES == 'true'
        run: |
          npm init -y 2>/dev/null || true
          npm install --save-dev jest @types/jest 2>/dev/null || true
          npx jest --json --outputFile=test-reports/results.json || true

      # 7️⃣ Commit and push generated files
      - name: Commit & Push
        if: env.HAS_FILES == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add tests/ test-reports/ || true
          if ! git diff --cached --quiet; then
            git commit -m "Auto-generated tests and reports from last commit"
            git push
          fi

      # 8️⃣ No files found
      - name: No JS/TS files
        if: env.HAS_FILES == 'false'
        run: echo "No JS/TS files found in last commit"
