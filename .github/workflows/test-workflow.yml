name: Send Files to Server

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  send_files:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Get changed JS/TS files from last commit
        id: files
        run: |
          echo "=== Getting JS/TS files from last commit ==="

          ALL_FILES=$(git show --pretty="" --name-only HEAD)

          CHANGED_FILES=""
          for file in $ALL_FILES; do
            case "$file" in
              *.js|*.jsx|*.ts|*.tsx)
                if [ -f "$file" ]; then
                  CHANGED_FILES="$CHANGED_FILES $file"
                fi
                ;;
            esac
          done

          CHANGED_FILES=$(echo $CHANGED_FILES | xargs)
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "Detected JS/TS files from last commit: '$CHANGED_FILES'"

          if [ -z "$CHANGED_FILES" ]; then
            echo "HAS_FILES=false" >> $GITHUB_ENV
            echo "No JS/TS files in last commit"
          else
            echo "HAS_FILES=true" >> $GITHUB_ENV
            echo "Found JS/TS files to send"
          fi

      - name: Send JS/TS files to server and process response
        if: env.HAS_FILES == 'true'
        run: |
          echo "=== Sending JS/TS files to server ==="

          RECEIVED_VALID_RESPONSE=false

          for file in $CHANGED_FILES; do
            echo ""
            echo "---- Processing: $file ----"
            
            if [ ! -f "$file" ]; then
              echo "File $file doesn't exist, skipping"
              continue
            fi
            
            echo "Reading file content..."
            CONTENT=$(cat "$file" | jq -Rs .) || {
              echo "Failed to read content for $file"
              continue
            }
            
            JSON_PAYLOAD=$(jq -n \
              --arg file_path "$file" \
              --argjson content "$CONTENT" \
              '{file_path: $file_path, content: $content}')
            
            echo "Sending to server..."
            
            HTTP_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
              https://42459725c5d9.ngrok-free.app/inputCode \
              -H "Content-Type: application/json" \
              -H "ngrok-skip-browser-warning: true" \
              -d "$JSON_PAYLOAD")
            
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1 | cut -d: -f2)
            RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            echo "HTTP Status: $HTTP_STATUS"
            echo "Server response: $RESPONSE_BODY"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Successfully sent $file"
              if echo "$RESPONSE_BODY" | jq empty 2>/dev/null; then
                echo "Valid JSON response received, saving for processing..."
                echo "$RESPONSE_BODY" > "server_response_${file//\//_}.json"
                RECEIVED_VALID_RESPONSE=true
              else
                echo "Response is not valid JSON, skipping file creation for $file"
              fi
            else
              echo "Failed to send $file (HTTP $HTTP_STATUS)"
            fi
            
            echo "------------------------"
          done

          echo "RECEIVED_VALID_RESPONSE=$RECEIVED_VALID_RESPONSE" >> $GITHUB_ENV

      - name: Create test files from server response
        if: env.HAS_FILES == 'true' && env.RECEIVED_VALID_RESPONSE == 'true'
        run: |
          echo "=== Creating test files from server responses ==="
          
          cat > process_responses.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          function createTestFiles(input, folder = 'tests') {
            let filesJson;
          
            if (typeof input === 'string') {
              input = input.replace(/^```json\s*/i, '').replace(/```$/i, '').trim();
          
              try {
                filesJson = JSON.parse(input);
              } catch (err) {
                console.error('Failed to parse JSON:', err);
                console.error('Input preview:', input.substring(0, 200) + '...');
                return;
              }
            } else if (typeof input === 'object') {
              filesJson = input;
            } else {
              console.error('Input must be a JSON string or object');
              return;
            }
          
            if (!fs.existsSync(folder)) {
              fs.mkdirSync(folder, { recursive: true });
              console.log(`Created folder: ${folder}`);
            }
          
            for (const [filename, content] of Object.entries(filesJson)) {
              const filePath = path.join(folder, path.basename(filename));
          
              try {
                fs.writeFileSync(filePath, content, 'utf8');
                console.log(`Created/Updated file: ${filePath}`);
              } catch (err) {
                console.error(`Failed to write file ${filePath}:`, err);
              }
            }
          }
          
          const responseFiles = fs.readdirSync('.').filter(file => file.startsWith('server_response_') && file.endsWith('.json'));
          
          if (responseFiles.length === 0) {
            console.log('No server response files found.');
            process.exit(0);
          }
          
          responseFiles.forEach(responseFile => {
            console.log(`\nProcessing ${responseFile}...`);
            try {
              const responseContent = fs.readFileSync(responseFile, 'utf8');
              
              let parsedContent;
              try {
                parsedContent = JSON.parse(responseContent);
                console.log('Successfully parsed outer JSON.');
              } catch (parseErr) {
                console.log('Response is not outer JSON, passing raw content to function.');
                parsedContent = responseContent;
              }
              
              createTestFiles(parsedContent);
              
              fs.unlinkSync(responseFile);
              console.log(`Cleaned up ${responseFile}`);
            } catch (err) {
              console.error(`Error processing ${responseFile}:`, err);
            }
          });
          EOF
          
          node process_responses.js
          
          rm process_responses.js

      - name: Configure Git
        if: env.HAS_FILES == 'true' && env.RECEIVED_VALID_RESPONSE == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push generated test files
        if: env.HAS_FILES == 'true' && env.RECEIVED_VALID_RESPONSE == 'true'
        run: |
          echo "=== Committing generated test files ==="

          if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"

            git checkout main

            git add tests/

            if git diff --cached --quiet; then
              echo "No changes to commit"
            else
              git commit -m "Add generated test files from server response"
              git push origin main
              echo "Successfully committed and pushed test files"
            fi
          else
            echo "No test files were created"
          fi

      - name: Create and commit test files
        run: |
          echo "=== Creating and Committing Test Files ==="
              
          # Create the processor script (assuming process_responses.js exists or is created here)
          # The actual content of process_responses.js goes here, or in a prior step.
          # For a complete solution, you'd have the 'cat > process_responses.js' block here.
              
          # Run the processor to create files in the 'tests' folder
          node process_responses.js
              
          # Configure Git
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
              
          # Add the newly created files
          git add tests/
              
          # Only commit if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            # Commit the changes
            git commit -m "Add generated test files"
              
            # Push the changes to the repository
            git push
            echo "Successfully committed and pushed test files."
          fi
              
          # Clean up temporary files
          echo "Cleanup complete."

      - name: Run tests and commit report
        if: env.HAS_FILES == 'true'
        run: |
          echo "=== Running Tests ==="

          # Create the reports directory if it doesn't exist
          mkdir -p test-reports

          # Generate a timestamp for the filename
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
          OUTPUT_FILE="test-reports/test-report-${TIMESTAMP}.json"

          # Run tests and save the JSON output
          npm test -- --json --outputFile=${OUTPUT_FILE}

          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add the newly created report file
          git add ${OUTPUT_FILE}

          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit. Test report is identical."
          else
            # Commit the report file
            git commit -m "Add test report: ${TIMESTAMP}"

            # Push the commit to the repository
            git push origin main
            echo "Successfully committed and pushed test report."
          fi

      
      - name: No JS/TS files found
        if: env.HAS_FILES == 'false'
        run: |
          echo "No JavaScript/TypeScript files found in last commit"
          echo "Only .js, .jsx, .ts, .tsx files are processed"