name: Send Files to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  send_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: files
        run: |
          echo "=== Getting changed files ==="
          
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ] || [ -z "${{ github.event.before }}" ]; then
            echo "First push or no previous commit - getting all files"
            CHANGED_FILES=$(find . -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.json" -o -name "*.py" -o -name "*.txt" -o -name "*.md" \) -not -path './.git/*' | tr '\n' ' ')
          else
            echo "Regular push - getting changed files"
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "Git diff returned nothing, trying alternative method"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
            fi
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "Still nothing, getting files from last commit"
              CHANGED_FILES=$(git show --pretty="" --name-only HEAD | tr '\n' ' ')
            fi
          fi
          
          CHANGED_FILES=$(echo $CHANGED_FILES | xargs)
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "Detected files: '$CHANGED_FILES'"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "HAS_FILES=false" >> $GITHUB_ENV
          else
            echo "HAS_FILES=true" >> $GITHUB_ENV
          fi

      - name: Send changed files to server
        if: env.HAS_FILES == 'true'
        run: |
          echo "=== Sending files to server ==="
          
          for file in $CHANGED_FILES; do
            echo ""
            echo "---- Processing: $file ----"
            
            if [ ! -f "$file" ]; then
              echo "⚠️  File $file doesn't exist, skipping"
              continue
            fi
            
            # Debug file encoding
            echo "File info:"
            file "$file" || echo "Cannot determine file type"
            
            # Convert file to UTF-8 if needed and read content
            echo "Reading and converting file content..."
            
            # First, try to detect and convert encoding
            if command -v iconv >/dev/null 2>&1; then
              # Try to convert from UTF-16 to UTF-8 if needed
              CONTENT=$(iconv -f UTF-16 -t UTF-8 "$file" 2>/dev/null | jq -Rs .) || \
              CONTENT=$(iconv -f UTF-16LE -t UTF-8 "$file" 2>/dev/null | jq -Rs .) || \
              CONTENT=$(cat "$file" | jq -Rs .)
            else
              # Fallback - just read as-is
              CONTENT=$(cat "$file" | jq -Rs .)
            fi
            
            if [ $? -ne 0 ]; then
              echo "❌ Failed to read content for $file"
              continue
            fi
            
            # Create JSON payload
            JSON_PAYLOAD=$(jq -n \
              --arg file_path "$file" \
              --argjson content "$CONTENT" \
              '{file_path: $file_path, content: $content}')
            
            echo "Sending to server..."
            
            HTTP_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
               https://5c6e510e6b7a.ngrok-free.app/inputCode \
              -H "Content-Type: application/json" \
              -H "ngrok-skip-browser-warning: true" \
              -d "$JSON_PAYLOAD")
            
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1 | cut -d: -f2)
            RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            echo "HTTP Status: $HTTP_STATUS"
            echo "Server response: $RESPONSE_BODY"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Successfully sent $file"
            else
              echo "❌ Failed to send $file (HTTP $HTTP_STATUS)"
            fi
            
            echo "------------------------"
          done

      - name: SERVER RESPONSE
        run: |
          echo "=== Server Response ==="
          echo "$RESPONSE_BODY"
          touch decode.js
          const fs = require('fs');
          const path = require('path');
          function createTestFiles(input, folder = 'tests') {
            let filesJson;

            // If input is a string, parse it
            if (typeof input === 'string') {
              // Remove ```json and ``` wrapping
              input = input.replace(/^```json\s*/i, '').replace(/```$/i, '').trim();

              try {
                filesJson = JSON.parse(input);
              } catch (err) {
                console.error('Failed to parse JSON:', err);
                return;
              }
            } else if (typeof input === 'object') {
              filesJson = input;
            } else {
              console.error('Input must be a JSON string or object');
              return;
            }

            // Ensure the folder exists
            if (!fs.existsSync(folder)) {
              fs.mkdirSync(folder, { recursive: true });
              console.log(`Created folder: ${folder}`);
            }

            // Create or overwrite files
            for (const [filename, content] of Object.entries(filesJson)) {
              const filePath = path.join(folder, path.basename(filename));

              try {
                fs.writeFileSync(filePath, content, 'utf8');
                console.log(`Created/Updated file: ${filePath}`);
              } catch (err) {
                console.error(`Failed to write file ${filePath}:`, err);
              }
            }
          }

      - name: Create test files from server response
        run: |
          echo "$RESPONSE_BODY" > response.json
          node -e "
          const fs = require('fs');
          const path = require('path');
          const input = fs.readFileSync('response.json', 'utf8');
          const data = JSON.parse(input.replace(/^```json\s*|```$/g, ''));
          const folder = 'tests';
          if (!fs.existsSync(folder)) fs.mkdirSync(folder);
          for (const [filename, content] of Object.entries(data)) {
            fs.writeFileSync(path.join(folder, path.basename(filename)), content, 'utf8');
            console.log('Created/Updated file:', filename);
          }
          "

      - name: Commit generated test files
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add tests/*
          git commit -m "Add generated test files" || echo "No changes to commit"
          git push

      # - name: Install dependencies
      #   run: |
      #     npm install
      #     npm install --save-dev jest

      # - name: Run Jest tests and save JSON report
      #   run: |
      #     npx jest --json --outputFile=jest-report.json

      