name: Send Files to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  send_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: files
        run: |
          echo "=== Getting changed files ==="
          
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ] || [ -z "${{ github.event.before }}" ]; then
            echo "First push or no previous commit - getting all files"
            CHANGED_FILES=$(find . -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.json" -o -name "*.py" -o -name "*.txt" -o -name "*.md" \) -not -path './.git/*' | tr '\n' ' ')
          else
            echo "Regular push - getting changed files"
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "Git diff returned nothing, trying alternative method"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
            fi
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "Still nothing, getting files from last commit"
              CHANGED_FILES=$(git show --pretty="" --name-only HEAD | tr '\n' ' ')
            fi
          fi
          
          CHANGED_FILES=$(echo $CHANGED_FILES | xargs)
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "Detected files: '$CHANGED_FILES'"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "HAS_FILES=false" >> $GITHUB_ENV
          else
            echo "HAS_FILES=true" >> $GITHUB_ENV
          fi

      - name: Send files and create/commit test files
        if: env.HAS_FILES == 'true'
        run: |
          echo "=== Sending files to server ==="
          
          # Initialize a file to store the final server response.
          # We'll assume the server returns a single aggregate JSON for all files sent.
          touch server_response.json
          
          for file in $CHANGED_FILES; do
            echo ""
            echo "---- Processing: $file ----"
            
            if [ ! -f "$file" ]; then
              echo "⚠️ File $file doesn't exist, skipping"
              continue
            fi
            
            # Read and convert file to UTF-8
            CONTENT=$(cat "$file" | jq -Rs .)
            if [ $? -ne 0 ]; then
              echo "❌ Failed to read content for $file"
              continue
            fi
            
            # Create JSON payload
            JSON_PAYLOAD=$(jq -n \
              --arg file_path "$file" \
              --argjson content "$CONTENT" \
              '{file_path: $file_path, content: $content}')
            
            echo "Sending to server..."
            
            # Capture the full response and status code
            HTTP_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
              https://5c6e510e6b7a.ngrok-free.app/inputCode \
              -H "Content-Type: application/json" \
              -H "ngrok-skip-browser-warning: true" \
              -d "$JSON_PAYLOAD")
            
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1 | cut -d: -f2)
            RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            echo "HTTP Status: $HTTP_STATUS"
            echo "Server response: $RESPONSE_BODY"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "$RESPONSE_BODY" > server_response.json
              echo "✅ Successfully received response for $file"
            else
              echo "❌ Failed to send $file (HTTP $HTTP_STATUS)"
              exit 1 # Fail the step if any file fails
            fi
            
            echo "------------------------"
          done
          
          echo "=== Creating and committing test files ==="
          
          # Read the server response from the file and pass it to Node.js
          node <<EOF
          const fs = require('fs');
          const path = require('path');
          const input = fs.readFileSync('server_response.json', 'utf8');
          let filesJson;

          if (input.trim() === '') {
            console.log('Server response was empty. No test files will be created.');
            process.exit(0);
          }
          
          const sanitizedInput = input.replace(/^```json\s*|```$/g, '').trim();
          try {
            filesJson = JSON.parse(sanitizedInput);
          } catch (err) {
            console.error('Failed to parse JSON from server response:', err);
            process.exit(1);
          }
          
          const folder = 'tests';
          if (!fs.existsSync(folder)) {
            fs.mkdirSync(folder, { recursive: true });
          }
          
          for (const [filename, content] of Object.entries(filesJson)) {
            const filePath = path.join(folder, path.basename(filename));
            fs.writeFileSync(filePath, content, 'utf8');
            console.log('Created/Updated file:', filePath);
          }
          EOF
          
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # Check for staged changes before attempting to commit
          # The `|| true` prevents the workflow from failing if tests/ doesn't exist
          git add tests/* || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit. Exiting."
          else
            git commit -m "Add generated test files"
            git pull --rebase origin $GITHUB_REF
            git push
          fi