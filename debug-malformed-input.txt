{
    "output": "json
{
  "tests/add.test.js": "const add = require('../add.js');\nconst testCases = require('./add.testCase.json');\n\ndescribe('add', () => {\n  test.each(testCases.add)(\n    'Function should %s',\n    ({ input, expected, description }) => {\n      expect(add(...input)).toBe(expected);\n    }\n  );\n});\n",
  "tests/add.testCase.json": "{\n  \"add\": [\n    {\n      \"input\": [2, 3],\n      \"expected\": 5,\n      \"description\": \"correctly add two positive integers\"\n    },\n    {\n      \"input\": [0, -5],\n      \"expected\": -5,\n      \"description\": \"correctly add zero and a negative integer\"\n    },\n    {\n      \"input\": [0.1, 0.2],\n      \"expected\": 0.30000000000000004,\n      \"description\": \"handle floating point addition with JavaScript's precision\"\n    },\n    {\n      \"input\": [\"Hello, \", \"World!\"],\n      \"expected\": \"Hello, World!\",\n      \"description\": \"concatenate strings when both inputs are strings\"\n    },\n    {\n      \"input\": [10, \"5\"],\n      \"expected\": \"105\",\n      \"description\": \"concatenate a number and a string\"\n    }\n  ]\n}\n",
  "tests/binary-search.test.js": "const binarySearch = require('../binary-search.js');\nconst testCases = require('./binary-search.testCase.json');\n\ndescribe('binarySearch', () => {\n  test.each(testCases.binarySearch)(\n    'Function should %s',\n    ({ input, expected, description }) => {\n      const [arr, target] = input;\n      expect(binarySearch(arr, target)).toBe(expected);\n    }\n  );\n});\n",
  "tests/binary-search.testCase.json": "{\n  \"binarySearch\": [\n    {\n      \"input\": [[1, 3, 5, 7, 9], 5],\n      \"expected\": 2,\n      \"description\": \"find the target in the middle of the array\"\n    },\n    {\n      \"input\": [[1, 3, 5, 7, 9], 1],\n      \"expected\": 0,\n      \"description\": \"find the target at the beginning of the array\"\n    },\n    {\n      \"input\": [[1, 3, 5, 7, 9], 9],\n      \"expected\": 4,\n      \"description\": \"find the target at the end of the array\"\n    },\n    {\n      \"input\": [[1, 3, 5, 7, 9], 4],\n      \"expected\": -1,\n      \"description\": \"return -1 when target is not found in the array\"\n    },\n    {\n      \"input\": [[], 5],\n      \"expected\": -1,\n      \"description\": \"return -1 for an empty array\"\n    }\n  ]\n}\n",
  "tests/diff.test.js": "const diff = require('../diff.js');\nconst testCases = require('./diff.testCase.json');\n\ndescribe('diff', () => {\n  test.each(testCases.diff)(\n    'Function should %s',\n    ({ input, expected, description }) => {\n      // Special handling for NaN, as NaN !== NaN\n      if (Number.isNaN(expected)) {\n        expect(Number.isNaN(diff(...input))).toBe(true);\n      } else {\n        expect(diff(...input)).toBe(expected);\n      }\n    }\n  );\n});\n",
  "tests/diff.testCase.json": "{\n  \"diff\": [\n    {\n      \"input\": [10, 3],\n      \"expected\": 7,\n      \"description\": \"correctly subtract two positive integers\"\n    },\n    {\n      \"input\": [3, 10],\n      \"expected\": -7,\n      \"description\": \"return a negative result when the first number is smaller\"\n    },\n    {\n      \"input\": [5, 5],\n      \"expected\": 0,\n      \"description\": \"return zero when numbers are equal\"\n    },\n    {\n      \"input\": [5.5, 2.3],\n      \"expected\": 3.2,\n      \"description\": \"handle floating point subtraction\"\n    },\n    {\n      \"input\": [\"abc\", 5],\n      \"expected\": NaN,\n      \"description\": \"return NaN for non-numeric string input\"\n    }\n  ]\n}\n"
}
"
}