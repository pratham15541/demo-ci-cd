"```json\n{\n  \"tests/createTestFiles.test.js\": \"const fs = require('fs');\\nconst path = require('path');\\n\\njest.mock('fs');\\njest.mock('path', () => ({\\n  ...jest.requireActual('path'),\\n  basename: jest.fn((p) => {\\n    const parts = p.split(/[\\\\/\\\\\\\\]/);\\n    return parts[parts.length - 1];\\n  }),\\n  join: jest.fn((...args) => args.join('/'))\\n}));\\n\\n// Assuming the 'createTestFiles' function is exported from the file, e.g., via `module.exports = { createTestFiles };`\\nconst { createTestFiles } = require('../createTestFiles');\\nconst testCases = require('./createTestFiles.testCase.json');\\n\\ndescribe('createTestFiles', () => {\\n  let consoleErrorSpy, consoleLogSpy;\\n\\n  beforeEach(() => {\\n    // Clear all mock calls and reset implementations for `fs` and `path`\\n    fs.existsSync.mockClear();\\n    fs.mkdirSync.mockClear();\\n    fs.writeFileSync.mockClear();\\n    path.basename.mockClear();\\n    path.join.mockClear();\\n\\n    // Default mock implementations for fs\\n    fs.existsSync.mockReturnValue(true); // By default, assume folder exists\\n    fs.mkdirSync.mockImplementation(() => {}); // By default, mkdir succeeds\\n    fs.writeFileSync.mockImplementation(() => {}); // By default, write succeeds\\n\\n    // Mock console.error and console.log to prevent cluttering test output and to assert calls\\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\\n  });\\n\\n  afterEach(() => {\\n    // Restore original console methods\\n    consoleErrorSpy.mockRestore();\\n    consoleLogSpy.mockRestore();\\n  });\\n\\n  testCases.createTestFiles.forEach(testCase => {\\n    test(testCase.description, () => {\\n      // Setup mocks specific to the test case, overriding defaults\\n      if (testCase.mockFsExistsSyncResult !== undefined) {\\n        fs.existsSync.mockReturnValue(testCase.mockFsExistsSyncResult);\\n      }\\n      if (testCase.mockFsWriteFileError) {\\n        fs.writeFileSync.mockImplementation(() => {\\n          throw new Error(testCase.mockFsWriteFileError);\\n        });\\n      }\\n\\n      // Call the function under test with spread input arguments\\n      createTestFiles(...testCase.input);\\n\\n      // Assertions\\n      if (testCase.expected.consoleErrorCount !== undefined) {\\n        expect(consoleErrorSpy).toHaveBeenCalledTimes(testCase.expected.consoleErrorCount);\\n      }\\n      if (testCase.expected.mkdirSyncCalledWith !== undefined && testCase.expected.mkdirSyncCalledWith !== null) {\\n        expect(fs.mkdirSync).toHaveBeenCalledWith(testCase.expected.mkdirSyncCalledWith, { recursive: true });\\n      } else if (testCase.expected.mkdirSyncCalledWith === null) {\\n        expect(fs.mkdirSync).not.toHaveBeenCalled();\\n      }\\n\\n      if (testCase.expected.writeFileSyncCalls !== undefined) {\\n        expect(fs.writeFileSync).toHaveBeenCalledTimes(testCase.expected.writeFileSyncCalls.length);\\n        testCase.expected.writeFileSyncCalls.forEach((call, index) => {\\n          // Note: using NthCalledWith to match the order of write calls\\n          expect(fs.writeFileSync).toHaveBeenNthCalledWith(index + 1, call.path, call.content, 'utf8');\\n        });\\n      } else {\\n        expect(fs.writeFileSync).not.toHaveBeenCalled();\\n      }\\n      \\n      // Assert specific console log messages\\n      if (testCase.expected.consoleLogCalls !== undefined) {\\n        expect(consoleLogSpy).toHaveBeenCalledTimes(testCase.expected.consoleLogCalls.length);\\n        testCase.expected.consoleLogCalls.forEach((logMessage, index) => {\\n          expect(consoleLogSpy).toHaveBeenNthCalledWith(index + 1, expect.stringContaining(logMessage));\\n        });\\n      } else {\\n        expect(consoleLogSpy).not.toHaveBeenCalled();\\n      }\\n      \\n      // Assert specific console error messages\\n      if (testCase.expected.consoleErrorMessages !== undefined) {\\n        expect(consoleErrorSpy).toHaveBeenCalledTimes(testCase.expected.consoleErrorMessages.length);\\n        testCase.expected.consoleErrorMessages.forEach((errorMessage, index) => {\\n          expect(consoleErrorSpy).toHaveBeenNthCalledWith(index + 1, expect.stringContaining(errorMessage));\\n        });\\n      } else if (testCase.expected.consoleErrorCount === 0) {\\n          expect(consoleErrorSpy).not.toHaveBeenCalled();\\n      }\\n    });\\n  });\\n});\\n\",\n  \"tests/createTestFiles.testCase.json\": \"{\\n  \\\"createTestFiles\\\": [\\n    {\\n      \\\"input\\\": [\\n        {\\n          \\\"file1.js\\\": \\\"console.log('hello');\\\",\\n          \\\"sub/file2.json\\\": \\\"{\\\\\\\"key\\\\\\\":\\\\\\\"value\\\\\\\"}\\\",\\n          \\\"file3.txt\\\": \\\"Just plain text\\\"\\n        },\\n        \\\"my-tests\\\"\\n      ],\\n      \\\"description\\\": \\\"should correctly create multiple files, including a pretty-printed JSON file, with object input and a custom folder\\\",\\n      \\\"mockFsExistsSyncResult\\\": false,\\n      \\\"expected\\\": {\\n        \\\"consoleErrorCount\\\": 0,\\n        \\\"consoleErrorMessages\\\": [],\\n        \\\"mkdirSyncCalledWith\\\": \\\"my-tests\\\",\\n        \\\"writeFileSyncCalls\\\": [\\n          { \\\"path\\\": \\\"my-tests/file1.js\\\", \\\"content\\\": \\\"console.log('hello');\\\" },\\n          { \\\"path\\\": \\\"my-tests/file2.json\\\", \\\"content\\\": \\\"{\\\\n  \\\\\\\"key\\\\\\\": \\\\\\\"value\\\\\\\"\\\\n}\\\" },\\n          { \\\"path\\\": \\\"my-tests/file3.txt\\\", \\\"content\\\": \\\"Just plain text\\\" }\\n        ],\\n        \\\"consoleLogCalls\\\": [\\\"Created folder: my-tests\\\", \\\"✅ Created/Updated file: my-tests/file1.js\\\", \\\"✅ Created/Updated file: my-tests/file2.json\\\", \\\"✅ Created/Updated file: my-tests/file3.txt\\\"]\\n      }\\n    },\\n    {\\n      \\\"input\\\": [\\n        {},\\n        \\\"empty-tests\\\"\\n      ],\\n      \\\"description\\\": \\\"should create folder but no files when input object is empty\\\",\\n      \\\"mockFsExistsSyncResult\\\": false,\\n      \\\"expected\\\": {\\n        \\\"consoleErrorCount\\\": 0,\\n        \\\"consoleErrorMessages\\\": [],\\n        \\\"mkdirSyncCalledWith\\\": \\\"empty-tests\\\",\\n        \\\"writeFileSyncCalls\\\": [],\\n        \\\"consoleLogCalls\\\": [\\\"Created folder: empty-tests\\\"]\\n      }\\n    },\\n    {\\n      \\\"input\\\": [\\n        \\\"```json\\\\n{\\\\n  \\\\\\\"single.js\\\\\\\": \\\\\\\"// one line code\\\\\\\"\\\\n}\\\\n```\\\",\\n        \\\"single-file-test\\\"\\n      ],\\n      \\\"description\\\": \\\"should correctly parse JSON string with markdown wrapper and create a single file when folder doesn't exist\\\",\\n      \\\"mockFsExistsSyncResult\\\": false,\\n      \\\"expected\\\": {\\n        \\\"consoleErrorCount\\\": 0,\\n        \\\"consoleErrorMessages\\\": [],\\n        \\\"mkdirSyncCalledWith\\\": \\\"single-file-test\\\",\\n        \\\"writeFileSyncCalls\\\": [\\n          { \\\"path\\\": \\\"single-file-test/single.js\\\", \\\"content\\\": \\\"// one line code\\\" }\\n        ],\\n        \\\"consoleLogCalls\\\": [\\\"Created folder: single-file-test\\\", \\\"✅ Created/Updated file: single-file-test/single.js\\\"]\\n      }\\n    },\\n    {\\n      \\\"input\\\": [\\n        \\\"this is not json\\\",\\n        \\\"invalid-json-test\\\"\\n      ],\\n      \\\"description\\\": \\\"should log an error and not create any files for invalid JSON string input\\\",\\n      \\\"expected\\\": {\\n        \\\"consoleErrorCount\\\": 2,\\n        \\\"consoleErrorMessages\\\": [\\\"Failed to parse JSON\\\", \\\"Input preview: this is not json...\\\"],\\n        \\\"mkdirSyncCalledWith\\\": null,\\n        \\\"writeFileSyncCalls\\\": [],\\n        \\\"consoleLogCalls\\\": []\\n      }\\n    },\\n    {\\n      \\\"input\\\": [\\n        {\\n          \\\"broken.js\\\": \\\"invalid code\\\"\\n        },\\n        \\\"error-test\\\"\\n      ],\\n      \\\"description\\\": \\\"should log an error for writeFileSync failure\\\",\\n      \\\"mockFsExistsSyncResult\\\": true,\\n      \\\"mockFsWriteFileError\\\": \\\"Permission denied\\\",\\n      \\\"expected\\\": {\\n        \\\"consoleErrorCount\\\": 1,\\n        \\\"consoleErrorMessages\\\": [\\\"❌ Failed to write file error-test/broken.js:\\\"],\\n        \\\"mkdirSyncCalledWith\\\": null,\\n        \\\"writeFileSyncCalls\\\": [\\n          { \\\"path\\\": \\\"error-test/broken.js\\\", \\\"content\\\": \\\"invalid code\\\" }\\n        ],\\n        \\\"consoleLogCalls\\\": []\\n      }\\n    }\\n  ]\\n}\"\n}\n```"